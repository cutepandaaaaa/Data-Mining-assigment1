import pandas as pd
import time
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report

# 读取数据集
column_names = ['age', 'workclass', 'fnlwgt', 'education', 'education-num',
                'marital-status', 'occupation', 'relationship', 'race', 'sex',
                'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'income']

# 训练数据集
train_data = pd.read_csv('adult.data', names=column_names, na_values=' ?')
train_data = train_data.dropna()

# 测试数据集
test_data = pd.read_csv('adult.test', names=column_names, na_values=' ?', skiprows=1)
test_data = test_data.dropna()

# 对 income 列进行二值化处理 (' <=50K' -> 0, ' >50K' -> 1)
train_data['income'] = train_data['income'].apply(lambda x: 1 if x == ' >50K' else 0)
test_data['income'] = test_data['income'].apply(lambda x: 1 if x == ' >50K.' else 0)

# 分离特征和标签
X_train = train_data.drop('income', axis=1)
y_train = train_data['income']
X_test = test_data.drop('income', axis=1)
y_test = test_data['income']

# 将类别特征进行one-hot编码
X_train = pd.get_dummies(X_train)
X_test = pd.get_dummies(X_test)

# 确保训练集和测试集有相同的特征列
X_train, X_test = X_train.align(X_test, join='left', axis=1, fill_value=0)

# 定义决策树分类器
dt = DecisionTreeClassifier(random_state=42)

param_grid = {
    'max_depth': [None, 5, 10, 15, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': [None, 'sqrt', 'log2']  # 去掉 'auto'
}

# 开始计时
start_time = time.time()

# 使用GridSearchCV进行参数调优
grid_search = GridSearchCV(estimator=dt, param_grid=param_grid,
                           scoring='accuracy', cv=5, verbose=1, n_jobs=-1)
grid_search.fit(X_train, y_train)

# 记录训练时间
training_time = time.time() - start_time

# 获取最佳参数
best_dt = grid_search.best_estimator_
print(f"Best parameters: {grid_search.best_params_}")

# 进行预测
y_pred = best_dt.predict(X_test)

# 评估模型
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred, output_dict=True)  # 修改为输出字典

# 提取精确率、召回率和F1分数
precision = report['1']['precision']
recall = report['1']['recall']
f1_score = report['1']['f1-score']

# 创建性能指标表格
performance_metrics = pd.DataFrame({
    'Metric': ['Training Time (s)', 'Accuracy', 'Precision', 'Recall', 'F1 Score'],
    'Value': [training_time, accuracy, precision, recall, f1_score]
})

# 打印表格
print(performance_metrics)
print(f"Accuracy: {accuracy:.2f}")
print("Classification Report:")
print(report)
